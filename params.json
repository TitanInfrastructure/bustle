{"google":"","body":"# Bustle [![Build Status](https://secure.travis-ci.org/fredwu/bustle.png?branch=master)](http://travis-ci.org/fredwu/bustle) [![Dependency Status](https://gemnasium.com/fredwu/bustle.png)](https://gemnasium.com/fredwu/bustle) [![Code Climate](https://codeclimate.com/badge.png)](https://codeclimate.com/github/fredwu/bustle)\r\n\r\nActivities recording and retrieving using a simple Pub/Sub-like interface.\r\n\r\nThe typical use cases are:\r\n\r\n- Timeline (e.g. tracking activities such as posting and commenting for users)\r\n- Logging\r\n\r\nThe advantages of Bustle are:\r\n\r\n- It is lightweight and simple to use\r\n- It is largely self-contained and separated from you core app logic\r\n- It works nicely with ActiveRecord out of box\r\n- It is ORM-agnostic therefore can be extended to use with other databases\r\n- It has full unit test coverage\r\n\r\nBustle is built for simplicity and extensibility. If you are after high performance pub/sub then this gem is not for you.\r\n\r\n## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n```ruby\r\ngem 'bustle'\r\n```\r\n\r\n## Usage\r\n\r\n### Configuration\r\n\r\nFirst of all, you will need to configure Bustle. If you are using Rails, you can put the following code in an initializer (e.g. `config/initializers/bustle.rb`).\r\n\r\n```ruby\r\nBustle.config do |c|\r\n  # Specify a storage strategy for storing activities\r\n  # Bustle ships with an ActiveRecord storage strategy\r\n  c.storage = Bustle::Storage::ActiveRecord\r\nend\r\n```\r\n\r\nFor ActiveRecord, you will need the following migration file:\r\n\r\n```ruby\r\nclass CreateBustleTables < ActiveRecord::Migration\r\n  def change\r\n    create_table :bustle_activities do |t|\r\n      t.string  :resource_class\r\n      t.integer :resource_id\r\n      t.string  :action,       :default => ''\r\n      t.text    :data,         :default => ''\r\n      t.integer :publisher_id, :null => false\r\n      t.timestamps\r\n    end\r\n\r\n    create_table :bustle_publishers do |t|\r\n      t.string  :resource_class, :null => false\r\n      t.integer :resource_id,    :null => false\r\n      t.timestamps\r\n    end\r\n\r\n    create_table :bustle_subscribers do |t|\r\n      t.string  :resource_class, :null => false\r\n      t.integer :resource_id,    :null => false\r\n      t.timestamps\r\n    end\r\n\r\n    create_table :bustle_subscriptions do |t|\r\n      t.integer :publisher_id,  :null => false\r\n      t.integer :subscriber_id, :null => false\r\n      t.timestamps\r\n    end\r\n\r\n    add_index :bustle_activities, :publisher_id\r\n    add_index :bustle_publishers, [:resource_class, :resource_id], :unique => true\r\n    add_index :bustle_subscribers, [:resource_class, :resource_id], :unique => true\r\n    add_index :bustle_subscriptions, :publisher_id\r\n    add_index :bustle_subscriptions, :subscriber_id\r\n    add_index :bustle_subscriptions, [:publisher_id, :subscriber_id], :unique => true\r\n  end\r\nend\r\n```\r\n\r\n### Flow\r\n\r\nUpon subscribing:\r\n\r\n1. Subscriber registers itself if not already registered\r\n2. Publisher registers itself if not already registered\r\n3. A Subscription is created for Subscriber and Publisher\r\n\r\nWhen activities occur:\r\n\r\n1. Publisher registers itself if not already registered\r\n2. Publisher publishes activity\r\n\r\n### API\r\n\r\n#### Register a Subscriber\r\n\r\n```ruby\r\n# returns a subscriber instance upon duplicated entry\r\nBustle::Subscribers.add subscriber\r\n# raises error upon duplicated entry\r\nBustle::Subscribers.add! subscriber\r\n\r\n# example\r\nuser = User.find(1)\r\nBustle::Subscribers.add user\r\n```\r\n\r\n#### Register a Publisher\r\n\r\n```ruby\r\n# returns a publisher instance upon duplicated entry\r\nBustle::Publishers.add publisher\r\n# raises error upon duplicated entry\r\nBustle::Publishers.add! publisher\r\n\r\n# example\r\npost = Post.find(1)\r\nBustle::Publishers.add post\r\n```\r\n\r\n#### Create a Subscription\r\n\r\n```ruby\r\n# returns a subscription instance upon duplicated entry\r\nBustle::Subscriptions.add bustle_publisher, bustle_subscriber\r\n# raises error upon duplicated entry\r\nBustle::Subscriptions.add! bustle_publisher, bustle_subscriber\r\n\r\n# example\r\npublisher  = Bustle::Publishers.get(Post.first)\r\nsubscriber = Bustle::Subscribers.get(User.first)\r\nBustle::Subscriptions.add publisher, subscriber\r\n```\r\n\r\n#### Find a Subscriber/Publisher/Subscription\r\n\r\n```ruby\r\nBustle::Subscribers.get subscriber\r\nBustle::Publishers.get publisher\r\nBustle::Subscriptions.get bustle_publisher, bustle_subscriber # => Bustle::Subscription\r\nBustle::Subscriptions.by bustle_publisher # => an array of Bustle::Subscription by the publisher\r\nBustle::Subscriptions.for bustle_subscriber # => an array of Bustle::Subscription for the subscriber\r\n```\r\n\r\n#### Remove a Subscriber/Publisher/Subscription\r\n\r\n```ruby\r\nBustle::Subscribers.remove subscriber\r\nBustle::Publishers.remove publisher\r\nBustle::Subscriptions.remove bustle_publisher, bustle_subscriber\r\n# or use `remove!` to raise an exception if the resource cannot be found\r\n```\r\n\r\nOr:\r\n\r\n```ruby\r\nBustle::Subscribers.get(subscriber).destroy\r\nBustle::Publishers.get(publisher).destroy\r\nBustle::Subscriptions.get(bustle_publisher, bustle_subscriber).destroy\r\n```\r\n\r\n#### Find Referenced Resources\r\n\r\nThese are helpful for finding referenced resources.\r\n\r\n```ruby\r\nBustle::Activity#publisher_resource\r\nBustle::Activity#target_resource\r\nBustle::Publisher#target_resource\r\nBustle::Subscriber#target_resource\r\nBustle::Subscription#publisher_resource\r\nBustle::Subscription#subscriber_resource\r\n```\r\n\r\n#### Publish an Activity\r\n\r\n```ruby\r\nBustle::Activities.add bustle_publisher, {\r\n  :resource => some_resource,\r\n  :action   => some_string,\r\n  :data     => some_text\r\n}\r\n# or\r\nBustle::Publisher.publish({\r\n  :resource => some_resource,\r\n  :action   => some_string,\r\n  :data     => some_text\r\n})\r\n\r\n# example\r\npost    = Post.find(1)\r\ncomment = post.comments.add(:content => \"I'm a comment\")\r\nBustle::Publishers.add post\r\npublisher = Bustle::Publishers.get post\r\npublisher.publish({\r\n  :resource => comment,\r\n  :action   => 'new',\r\n  :data     => 'useful for putting serialized data or JSON here'\r\n})\r\n```\r\n\r\n#### Activities\r\n\r\n##### Retrieve Activities for a Subscriber\r\n\r\n```ruby\r\nBustle::Activities.for bustle_subscriber\r\n# or\r\nBustle::Subscriber.activities\r\n\r\n# example\r\nsubscriber = Bustle::Subscribers.get(User.first)\r\nsubscriber.activities\r\n```\r\n\r\n##### Retrieve Activities by a Publisher\r\n\r\n```ruby\r\nBustle::Activities.by bustle_publisher\r\n# or\r\nBustle::Publisher.activities\r\n\r\n# example\r\npublisher = Bustle::Publishers.get(Post.first)\r\npublisher.activities\r\n```\r\n\r\n#### Filtering (for Activities and Subscriptions)\r\n\r\n```ruby\r\nBustle::Activities.filter :key => :value\r\nBustle::Subscriptions.filter :key => :value\r\n# or\r\nBustle::Subscriber.activities :key => :value\r\n\r\n# example\r\nsubscriber = Bustle::Subscribers.get(User.first)\r\nsubscriber.activities :action => 'new'\r\n```\r\n\r\n## License\r\n\r\nThis gem is released under the [MIT License](http://www.opensource.org/licenses/mit-license.php).\r\n\r\n## Author\r\n\r\n[Fred Wu](https://github.com/fredwu), originally built for [500 Startups](http://500.co).\r\n","tagline":"Activities recording and retrieving using a simple Pub/Sub architecture.","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Bustle"}